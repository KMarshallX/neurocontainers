tests:
  - name: afni version check
    script: |
      # Check AFNI version matches expected version from build.yaml (25.2.03)
      echo "=== AFNI Version Check ==="
      echo "Expected version: 25.2.03"
      
      # Check if AFNI is installed
      if ! command -v afni_system_check.py >/dev/null 2>&1; then
        echo "✗ ERROR: afni_system_check.py not found - AFNI may not be installed"
        exit 1
      fi
      
      if ! command -v afni >/dev/null 2>&1; then
        echo "✗ ERROR: afni executable not found"
        exit 1
      fi
      
      # Check AFNI binaries directory
      if [ ! -d "/usr/local/abin" ]; then
        echo "✗ ERROR: AFNI binaries directory not found"
        exit 1
      fi
      
      echo "✓ AFNI installation checks passed"
      
      # Get version from afni_system_check.py
      echo "=== Getting AFNI Version ==="
      VERSION_OUTPUT=$(afni_system_check.py -check_all 2>&1)
      echo "Full system check output (for version detection):"
      echo "$VERSION_OUTPUT" | grep -E "(version|AFNI|release|date)" -i | head -15
      
      # Check if we can find version 25.2.03 in the output
      if echo "$VERSION_OUTPUT" | grep -q "25.2.03"; then
        echo "✓ SUCCESS: Found expected version 25.2.03"
      else
        echo "⚠ WARNING: Expected version 25.2.03 not found in system check output"
        echo "Searching for version patterns..."
        
        # Look for common version patterns
        VERSION_LINES=$(echo "$VERSION_OUTPUT" | grep -E "([0-9]+\.[0-9]+\.[0-9]+|version|release)" -i | head -10)
        if [ -n "$VERSION_LINES" ]; then
          echo "Found version-related lines:"
          echo "$VERSION_LINES"
        else
          echo "No version patterns found in output"
        fi
        
        echo "This may indicate a version mismatch or different version format"
        echo "Manual verification may be needed"
      fi
      
      # Additional information
      echo "=== Additional Information ==="
      echo "✓ AFNI executable found in PATH"
      echo "✓ AFNI binaries directory exists with $(ls /usr/local/abin/ | wc -l) binaries"
      
      echo "=== Version Check Complete ==="

  - name: afni Full Test

    manual: true

    prep:
      - name: Test AFNI functions
        script: |
          afni_system_check.py -check_all
          afni_system_check.py -disp_ver_pylibs flask flask_cors

    freesurfer:
      - name: Test Freesurfer functions
        script: |
          \@SUMA_Make_Spec_FS -NIFTI -fspath /opt/freesurfer-7.4.1/subjects/fsaverage/surf -sid fsaverage

    R:
      - name: Test R functions
        script: |
          R 
          library("data.table")

    cmdstanr:
      - name: Test cmdstanr functions
        script: |
          R
          library(cmdstanr)
          cmdstanr::set_cmdstan_path("/opt/cmdstan-2.35.0/")
          file <- file.path(cmdstan_path(), "examples", "bernoulli", "bernoulli.stan")
          mod <- cmdstan_model(file)
          mod$print()
          mod$exe_file()

          data_list <- list(N = 10, y = c(0,1,0,0,0,0,0,0,0,1))

          fit <- mod$sample(
            data = data_list,
            seed = 123,
            chains = 4,
            parallel_chains = 4,
            refresh = 500 # print update every 500 iters
          )

    3dLMEr:
      - name: Test 3dLMEr functions
        script: |
          tar xvzf test.tgz
          bash run.LMEr.txt
    
    suma:
      - name: Test suma functions
        script: |
          # The suma crashes were triggered by a quite specific action: after opening suma, go to View > Object controller, then when I clicked and dragged the slider to adjust the T-threshold it would crash.
