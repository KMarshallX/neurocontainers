name: build-app

on:
  workflow_call:
    inputs:
      application:
        required: true
        type: string
      runner:
        required: true
        type: string

env:
  GH_REGISTRY: ${{ secrets.GH_REGISTRY }}
  DOCKERHUB_ORG: ${{ secrets.DOCKERHUB_ORG }}
  OS_PASSWORD: ${{ secrets.SWIFT_OS_PASSWORD }}
  OS_PROJECT_ID: ${{ secrets.SWIFT_OS_PROJECT_ID }}
  OS_USERNAME: ${{ secrets.SWIFT_OS_USERNAME }}
  OS_APPLICATION_CREDENTIAL_ID: ${{ secrets.SWIFT_OS_APPLICATION_CREDENTIAL_ID }}
  OS_APPLICATION_CREDENTIAL_SECRET: ${{ secrets.SWIFT_OS_APPLICATION_CREDENTIAL_SECRET }}

jobs:
  build:
    runs-on: ${{ inputs.runner }}
    permissions:
      packages: write
      id-token: write
      contents: write
    outputs:
      APPLICATION: ${{ steps.ENVVARS.outputs.APPLICATION }}
      BUILDDATE: ${{ steps.ENVVARS.outputs.BUILDDATE }}
      IMAGENAME: ${{ steps.IMAGEVARS.outputs.IMAGENAME }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        # with:
        #   token: ${{ secrets.NEURODESK_GITHUB_TOKEN_ISSUE_AUTOMATION }}
      - name: Set environment variables
        id: ENVVARS
        run: |
          APPLICATION=${{ inputs.application }}
          SHORT_SHA=$(git rev-parse --short $GITHUB_SHA)
          BUILDDATE=`date +%Y%m%d`
          echo "APPLICATION=$APPLICATION" >> $GITHUB_ENV
          echo "APPLICATION=$APPLICATION" >> $GITHUB_OUTPUT
          echo "SHORT_SHA=$SHORT_SHA" >> $GITHUB_ENV
          echo "BUILDDATE=$BUILDDATE" >> $GITHUB_ENV
          echo "BUILDDATE=$BUILDDATE" >> $GITHUB_OUTPUT
      - name: Fetch build config overrides
        if: "!contains(inputs.runner, 'self-hosted')"
        run: |
          FREEUPSPACE=$(cat .github/workflows/build-config.json | jq -r ".${APPLICATION}.freeUpSpace // .default.freeUpSpace // false")
          echo "FREEUPSPACE=${FREEUPSPACE}"
          echo "FREEUPSPACE=${FREEUPSPACE}" >> $GITHUB_ENV
      - name: Free up space (optional)
        if: env.FREEUPSPACE == 'true'
        uses: easimon/maximize-build-space@fc881a613ad2a34aca9c9624518214ebc21dfc0c
        with:
          root-reserve-mb: 40000
          swap-size-mb: 1024
          remove-dotnet: "true"
          remove-android: "true"
          remove-haskell: "true"
          overprovision-lvm: "true"
      - name: Move docker installation (optional)
        if: env.FREEUPSPACE == 'true'
        run: |
          sudo mv /var/lib/docker /home/runner/work/docker
          sudo ln -s /home/runner/work/docker /var/lib/docker
          sudo systemctl restart docker
      - name: Install Builder Dependencies
        run: |
          pip install -r requirements.txt
      - name: Generate Dockerfile and Release File
        id: generate
        run: |
          echo "APPLICATION: $APPLICATION"
          ./builder/build.py generate $APPLICATION --recreate --auto-build --generate-release
      - name: Set image variables
        id: IMAGEVARS
        run: |
          DOCKERFILE=`basename $(find ./build/$APPLICATION/ -type f -iname "*.Dockerfile" | head -1)`
          # if the dockerfile is not found, exit with error
          if [ -z "$DOCKERFILE" ]; then
            echo "Dockerfile not found for $APPLICATION"
            exit 1
          fi
          IMAGENAME=$(echo $(basename $DOCKERFILE .Dockerfile) | tr '[A-Z]' '[a-z]')
          IMAGEID=ghcr.io/$GITHUB_REPOSITORY/$IMAGENAME
          IMAGEID=$(echo $IMAGEID | tr '[A-Z]' '[a-z]')  
          echo "IMAGENAME: $IMAGENAME"
          echo "IMAGEID: $IMAGEID"
          echo "IMAGENAME_TEST=${IMAGENAME//_/ }" >> $GITHUB_ENV
          echo "test command: bash /neurocommand/local/fetch_and_run.sh ${IMAGENAME//_/ } $BUILDDATE"
          echo "IMAGENAME=$IMAGENAME" >> $GITHUB_ENV
          echo "IMAGENAME=$IMAGENAME" >> $GITHUB_OUTPUT
          echo "IMAGEID=$IMAGEID" >> $GITHUB_ENV

      - name: Login to GHCR
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435

      - name: Get rootfs of cached image
        run: |
          docker pull $IMAGEID:latest && ROOTFS_CACHE=$(docker inspect --format='{{.RootFS}}' $IMAGEID:latest) || true
          echo "ROOTFS_CACHE=$ROOTFS_CACHE" >> $GITHUB_ENV

      - name: Build and export
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83
        with:
          context: ./build/${{ env.APPLICATION }}
          file: ./build/${{ env.APPLICATION }}/${{ env.IMAGENAME }}.Dockerfile
          push: false
          load: true
          tags: ${{ env.IMAGEID }}:${{ env.BUILDDATE }}
          cache-from: type=registry,ref=${{ env.IMAGEID }}:latest
          cache-to: type=inline
          outputs: type=docker,dest=${{ runner.temp }}/${{ env.APPLICATION }}-${{ env.BUILDDATE }}.tar
  
      - name: Upload build artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: ${{ env.APPLICATION }}-${{ env.BUILDDATE }}
          path: ${{ runner.temp }}/${{ env.APPLICATION }}-${{ env.BUILDDATE }}.tar
          retention-days: 1
  
  push-ghcr:
    needs: build
    runs-on: ${{ inputs.runner }}
    permissions:
      packages: write

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093
        with:
          name: ${{ needs.build.outputs.APPLICATION }}-${{ needs.build.outputs.BUILDDATE }}
          path: ${{ runner.temp }}

      - name: Load metadata and image
        run: docker load --input ${{ runner.temp }}/${{ needs.build.outputs.APPLICATION }}-${{ needs.build.outputs.BUILDDATE }}.tar

      - name: Login to GHCR
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Push to GHCR
        run: |
          docker tag ghcr.io/$GITHUB_REPOSITORY/${{ needs.build.outputs.IMAGENAME }}:${{ needs.build.outputs.BUILDDATE }} ghcr.io/$GITHUB_REPOSITORY/${{ needs.build.outputs.IMAGENAME }}:latest
          docker push --all-tags ghcr.io/$GITHUB_REPOSITORY/${{ needs.build.outputs.IMAGENAME }}
  
  push-ghcr-sif:
    needs: build
    runs-on: ${{ inputs.runner }}
    permissions:
      packages: write

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093
        with:
          name: ${{ needs.build.outputs.APPLICATION }}-${{ needs.build.outputs.BUILDDATE }}
          path: ${{ runner.temp }}

      - name: Load metadata and image
        run: docker load --input ${{ runner.temp }}/${{ needs.build.outputs.APPLICATION }}-${{ needs.build.outputs.BUILDDATE }}.tar

      - name: Login to GHCR
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Push to GHCR
        run: |
          # install apptainer if no singularity executable is available
          if ! command -v singularity &>/dev/null; then
            #This prevents the sometimes stuck apt process from stopping the build
            if [ -f "/var/lib/apt/lists/lock" ]; then
              sudo rm -f /var/lib/apt/lists/lock
              sudo rm -f /var/cache/apt/archives/lock
              sudo rm -f /var/lib/dpkg/lock*
            fi

            sudo apt-get install -y software-properties-common
            sudo add-apt-repository -y ppa:apptainer/ppa
            sudo apt-get update
            sudo apt-get install -y apptainer
          fi

          export IMAGE_HOME="${{ runner.temp }}"

          if [ -d "$IMAGE_HOME" ]; then
            echo "[DEBUG] $IMAGE_HOME exists"
          else
            echo "[DEBUG] $IMAGE_HOME does not exist. Creating ..."
            sudo mkdir -p $IMAGE_HOME
            sudo chmod a+rwx $IMAGE_HOME
          fi

          if [ -f "$IMAGE_HOME/${IMAGENAME}_${BUILDDATE}.simg" ]; then
            rm -rf "$IMAGE_HOME/${IMAGENAME}_${BUILDDATE}.simg"
          fi
          echo "[DEBUG] building singularity image from docker image:"
          time singularity build "${{ runner.temp }}/${{ needs.build.outputs.IMAGENAME }}_${{ needs.build.outputs.BUILDDATE }}.simg" docker-daemon://ghcr.io/$GITHUB_REPOSITORY/${{ needs.build.outputs.IMAGENAME }}:${{ needs.build.outputs.BUILDDATE }}
          echo "[DEBUG] done building singularity image from docker image!"
  
      - name: Upload build artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: ${{ needs.build.outputs.IMAGENAME }}_${{ needs.build.outputs.BUILDDATE }}.simg
          path: ${{ runner.temp }}/${{ needs.build.outputs.IMAGENAME }}_${{ needs.build.outputs.BUILDDATE }}.simg
          retention-days: 1

  push-dockerhub:
    needs: build
    runs-on: ${{ inputs.runner }}
    permissions:
      packages: write

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093
        with:
          name: ${{ needs.build.outputs.APPLICATION }}-${{ needs.build.outputs.BUILDDATE }}
          path: ${{ runner.temp }}

      - name: Load metadata and image
        run: docker load --input ${{ runner.temp }}/${{ needs.build.outputs.APPLICATION }}-${{ needs.build.outputs.BUILDDATE }}.tar

      - name: Login to DockerHub
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Push to GHCR
        run: |
          docker tag ghcr.io/$GITHUB_REPOSITORY/${{ needs.build.outputs.IMAGENAME }}:${{ needs.build.outputs.BUILDDATE }} ${{ secrets.DOCKERHUB_ORG }}/${{ needs.build.outputs.IMAGENAME }}:${{ needs.build.outputs.BUILDDATE }}
          docker tag ghcr.io/$GITHUB_REPOSITORY/${{ needs.build.outputs.IMAGENAME }}:${{ needs.build.outputs.BUILDDATE }} ${{ secrets.DOCKERHUB_ORG }}/${{ needs.build.outputs.IMAGENAME }}:latest
          docker push --all-tags ${{ secrets.DOCKERHUB_ORG }}/${{ needs.build.outputs.IMAGENAME }}
